error: Undefined Behavior: not granting access to tag <BORROW_IDX> because incompatible item is protected: [Unique for <BORROW_IDX> (call 929)]
  --> $DIR/aliasing_mut1.rs:LL:CC
   |
LL | pub fn safe(_x: &mut i32, _y: &mut i32) {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not granting access to tag <BORROW_IDX> because incompatible item is protected: [Unique for <BORROW_IDX> (call 929)]
   |
   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental
   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information
help: <BORROW_IDX> was created by a retag at offsets [$HEX..$HEX]
  --> $DIR/aliasing_mut1.rs:LL:CC
   |
LL |     let xraw: *mut i32 = unsafe { mem::transmute(&mut x) };
   |                                                  ^^^^^^
help: <BORROW_IDX> was protected due to <BORROW_IDX> which was created here
  --> $DIR/aliasing_mut1.rs:LL:CC
   |
LL |     let xraw: *mut i32 = unsafe { mem::transmute(&mut x) };
   |                                                  ^^^^^^
help: this protector is live for this call
  --> $DIR/aliasing_mut1.rs:LL:CC
   |
LL | pub fn safe(_x: &mut i32, _y: &mut i32) {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: inside `safe` at $DIR/aliasing_mut1.rs:LL:CC
note: inside `main` at $DIR/aliasing_mut1.rs:LL:CC
  --> $DIR/aliasing_mut1.rs:LL:CC
   |
LL |     safe_raw(xraw, xraw);
   |     ^^^^^^^^^^^^^^^^^^^^

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to previous error

